{"title":"Windows内核学习","uid":"9eef03b0fc89540798a72a80f475040f","slug":"20230915-Windows-Kernel","date":"2023-09-15T02:00:00.000Z","updated":"2023-10-19T13:17:33.641Z","comments":true,"path":"api/articles/20230915-Windows-Kernel.json","keywords":null,"cover":[],"content":"<h1 id=\"01-环境搭建\"><a href=\"#01-环境搭建\" class=\"headerlink\" title=\"01_环境搭建\"></a>01_环境搭建</h1><ul>\n<li>Windows XP Professional 虚拟机<ul>\n<li>内存256MB，小一点方便快照</li>\n<li>处理器单核单线程，方便实验，多核具有复杂性</li>\n<li>串口 \\\\.\\pipe\\com_1</li>\n<li>C:\\\\boot.ini 设置调试模式：multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS&#x3D;”Microsoft Windows XP Professional” &#x2F;noexecute&#x3D;optin &#x2F;fastdetect &#x2F;debug &#x2F;debugport&#x3D;com_1 &#x2F;baudrate&#x3D;115200</li>\n</ul>\n</li>\n<li>windbg 启动参数：<code>&quot;C:\\Program Files\\Windows Kits\\10\\Debuggers\\x64\\windbg.exe&quot; -b -k com:pipe,port=\\\\.\\pipe\\com_1,baud=115200,reconnect,resets=0 -y SRV\\*D:\\symbol\\*http://msdl.microsoft.com/download/symbols</code></li>\n<li>Visual Studio2010 (高版本VS生成的exe文件无法在XP上运行)<ul>\n<li>Release，Win32</li>\n<li>项目属性–配置属性–链接器–随机基址-&gt;否</li>\n<li>项目属性–配置属性–链接器–固定基址-&gt;是</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"02-中断提权\"><a href=\"#02-中断提权\" class=\"headerlink\" title=\"02_中断提权\"></a>02_中断提权</h1><p>本节虚拟机内需要安装的工具：</p>\n<ul>\n<li>XueTr：查看内核状态</li>\n</ul>\n<p>系统中高于0x80000000的地址是内核地址，低于0x80000000的地址是用户地址</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nDWORD g_tmp &#x3D; 0;\n\n&#x2F;&#x2F; r idtr                           读中断描述符表寄存器\n&#x2F;&#x2F; dq 8003f400 l40                  读中断描述符表\n&#x2F;&#x2F; eq 8003f500  0040ee00&#96;00081000   写中断描述符表，两边即目标函数0x00401000，中间八位是权限描述等\n&#x2F;&#x2F; 写完之后 XueTr 上还是看不到，但是 windbg 能看到，原因是 XueTr 的智能识别识别不了0x00401000函数\n\n&#x2F;&#x2F; 裸函数，没有 push ebp 之类的函数头，方便写汇编\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n\t\tmov eax, dword ptr ds:[0x8003f014]\n\t\tmov g_tmp, eax  &#x2F;&#x2F; 这里不要用printf，尽量少写代码，printf经过层层调用干了很多事，在0环中是非常危险的\n\t\tiretd           &#x2F;&#x2F; 32位不是iret，是iretd\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; 产生偏移为0x20的中断\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n&#x2F;&#x2F; 3环中 int 0 和直接除零异常不同，根据中断描述符表对应的dpl进行不同的处理\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tprintf(&quot;%p\\n&quot;, g_tmp);\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n<p>注意：能调试内核的原因是启动了debug模式，调试器接管了系统，否则是无法调试内核的</p>\n<h1 id=\"03-多核复杂性-1\"><a href=\"#03-多核复杂性-1\" class=\"headerlink\" title=\"03_多核复杂性(1)\"></a>03_多核复杂性(1)</h1><p>本节虚拟机内需要安装的工具：</p>\n<ul>\n<li>Cheat Engine 6.x：拥有驱动模块dbk32.sys，可以更改内核地址。第一次启动需要在 设置–其他 全部勾上</li>\n</ul>\n<p>注意：乱改内核地址会蓝屏</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nDWORD g_tmp;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123; &#x2F;&#x2F; 中断处理进程进来后中断是关闭状态，防止中断嵌套\n        pushfd\n\t\tpop eax\n\t\tmov g_tmp, eax\n        &#x2F;&#x2F; 第九位eflag是中断位\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tprintf(&quot;%p\\n&quot;, g_tmp);\n    &#x2F;&#x2F; 显示46，正常3环会是246\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n<p>多核时windbg切换核：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0: kd&gt; ~1\n1: kd&gt;</code></pre>\n\n\n\n<h1 id=\"04-多核复杂性-2\"><a href=\"#04-多核复杂性-2\" class=\"headerlink\" title=\"04_多核复杂性(2)\"></a>04_多核复杂性(2)</h1><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        &#x2F;&#x2F; 多核复杂性：想稳定挂钩，涉及到lock页，此处是简单绕过\n        mov eax, cr0         &#x2F;&#x2F; 修改cr0绕过写保护，cr0不能直接与\n        and eax, not 10000h  &#x2F;&#x2F; 取反，同时适用于不同位数的寄存器\n        mov cr0, eax\n        \n        mov eax, 0xffffffff\n        &#x2F;&#x2F; 0x80542520来源于主要系统模块ntkrpamp(ntkrnlpa.exe?)的_KiFastCallEntry(3环进0环的入口)\n        &#x2F;&#x2F; 用ida分析ntkrpamp(ntkrnlpa.exe?)时需要基址重定位\n        mov ds:[0x80542520], eax\n        &#x2F;&#x2F; 这里有个有意思的点：可以修改idt表项，将之前的入口函数地址痕迹清除\n        \n        &#x2F;&#x2F; 此处不开写保护直接返回有极小概率蓝屏，即当程序运行到这两条语句之间时发生中断\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n\n<h1 id=\"05-中断现场-1\"><a href=\"#05-中断现场-1\" class=\"headerlink\" title=\"05_中断现场(1)\"></a>05_中断现场(1)</h1><p>观察中断前和中断后寄存器的变化</p>\n<p>注意：不要用printf来观察，而是如同下面使用全局变量和mov指令进行观察，printf会破坏寄存器现场</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nDWORD g_esp[2];\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        mov [g_esp+4], esp\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n    __asm&#123;\n        mov [g_esp], esp\n    &#125;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n    printf(&quot;%p\\n&quot;, g_esp[0]);\n    printf(&quot;%p\\n&quot;, g_esp[1]);\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n<p>eax,ebx,ecx,edx,esp,ebp,esi,edi,cs,ds,ss,es,fs,gs</p>\n<p>有改变的寄存器：cs(根据门描述符变化)，ss，esp，eflags，eip</p>\n<p>描述符(用途：①内存区域；②门) gdt idt 保护模式 选择子</p>\n<h1 id=\"06-中断现场-2\"><a href=\"#06-中断现场-2\" class=\"headerlink\" title=\"06_中断现场(2)\"></a>06_中断现场(2)</h1><p>进入0环中断函数后用windbg断下来在windbg寄存器窗口查看fs的值为30，而根据上节的情况观察到fs的值是3B(此值是正确的)，因为断点将信息传输给调试器时进行了大量不可控的操作。“对微观世界的观测会对微观物质产生影响”，调试器侵入内核会对其产生影响。所以不要太依赖调试器</p>\n<p>一个基本观点：调试器的核心代码是不能被进行调试的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nDWORD g_8003f038;   &#x2F;&#x2F; 此gdt表项在windbg和XueTr中查看到的值不同(XueTr是正确的)\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        push eax\n        mov eax, ds:[0x8003f038]\n        mov g_8003f038, eax\n        pop eax\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n    printf(&quot;%p\\n&quot;, g_8003f038);\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n<p>ss是esp使用的段，当权限切换的时候伴随着堆栈的切换</p>\n<h1 id=\"07-中断现场-3\"><a href=\"#07-中断现场-3\" class=\"headerlink\" title=\"07_中断现场(3)\"></a>07_中断现场(3)</h1><p>cpu进行线程调度的时候，就把esp内核栈地址和ss地址写入tss</p>\n<p>从0环回3环时栈里依次存储了eip，ring3 cs，ring3 eflags，ring3 esp，ring3 ss的值</p>\n<h1 id=\"08-再次开中断\"><a href=\"#08-再次开中断\" class=\"headerlink\" title=\"08_再次开中断\"></a>08_再次开中断</h1><p>_KiFastCallEntry中sti开中断之前，进行了一些调度，布置内核安全的环境，即可调用0环api函数。0环中fs要指向kpcr，而3环中fs指向TEB</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        push 0x30\n        pop fs    &#x2F;&#x2F; 让fs指向kpcr\n        &#x2F;&#x2F; pop fs的二进制指令\n        &#x2F;&#x2F; __emit 0x0f\n        &#x2F;&#x2F; __emit 0xa1\n        sti       &#x2F;&#x2F; 开中断\nL:\n        jmp L     &#x2F;&#x2F; 死循环\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n<p>任务管理器结束进程时在0环返回3环的瞬间插入APC队列，从而结束进程，本例中死循环无法结束进程</p>\n<h1 id=\"09-API调用\"><a href=\"#09-API调用\" class=\"headerlink\" title=\"09_API调用\"></a>09_API调用</h1><p>本节代码示例只能调用部分内核api，因为只布置了fs，其他环境并未布置，若api需要用到其他环境则无法被调用</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\ntypedef DOWRD (__stdcall *EX_ALLOCATE)(DOWRD PoolType, DOWRD NumberOfBytes);\nEX_ALLOCATE ExAllocatePool &#x3D; (EX_ALLOCATE)0x80537FF8;\nDOWRD g_pool;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        push 0x30\n        pop fs    &#x2F;&#x2F; 让fs指向kpcr\n        sti       &#x2F;&#x2F; 开中断\n\t&#125;\n    \n    g_pool &#x3D; ExAllocatePool(0, 4096);\n    \n\t__asm &#123;\n        cli       &#x2F;&#x2F; 关中断\n        push 0x3B &#x2F;&#x2F; 恢复fs指向TEB\n        pop fs\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n    printf(&quot;%p\\n&quot;, g_pool);\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n<p>此代码已经与驱动开发基本框架非常接近</p>\n<h1 id=\"10-InlineHook-1\"><a href=\"#10-InlineHook-1\" class=\"headerlink\" title=\"10_InlineHook(1)\"></a>10_InlineHook(1)</h1><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nchar code[64] &#x3D; &#123;\n    0xb9, 0x23, 0x00, 0x00, 0x00,   &#x2F;&#x2F; mov ecx, 0x23 被hook的函数(_KiFastCallEntry)中被占用的指令\n    0xe9, 0x00, 0x34, 0x50, 0x00,   &#x2F;&#x2F; 跳回原来的地址，不能用私有的进程地址，需要公共的内核地址\n&#125;;\n\nint i;\nchar *p;\nvoid __declspec(naked) IdtEntry() &#123;\n    &#x2F;&#x2F; 裸函数中不要用局部变量\n    p &#x3D; (char*)0x8003f120;         &#x2F;&#x2F; gdt表里未使用的地址\n    for(i &#x3D; 0; i &lt; 10; i++)&#123;\n        *p &#x3D; code[i];\n        p++;\n    &#125;\n\t__asm &#123;\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n\n<h1 id=\"11-InlineHook-2\"><a href=\"#11-InlineHook-2\" class=\"headerlink\" title=\"11_InlineHook(2)\"></a>11_InlineHook(2)</h1><p>我的KiFastCallEntry函数地址略有不同</p>\n<p><img src=\"20230915-Windows-Kernel/image-20230920124703453.png\" alt=\"image-20230920124703453\"></p>\n<h2 id=\"写GDT\"><a href=\"#写GDT\" class=\"headerlink\" title=\"写GDT\"></a>写GDT</h2><p>将想要执行的代码写入gdt里：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nvoid JmpTarget();\n\nint i;\nchar *p;\nvoid __declspec(naked) IdtEntry() &#123;\n    p &#x3D; (char*)0x8003f120;\n    for(i &#x3D; 0; i &lt; 64; i++)&#123;\n        *p &#x3D; ((char*)JmpTarget)[i];\n        p++;\n    &#125;\n\t__asm &#123;\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid __declspec(naked) JmpTarget() &#123;\n    __asm&#123;\n        &#x2F;&#x2F; 多占用一点指令，将用到ecx的指令搬移到此处，就可以使用ecx寄存器进行操作了\n        mov ecx, 0x23\n        push 0x30\n        pop fs\n        mov ds, cx\n        mov es, cx\n        \n        \n        pushad\n        pushfd\n        \n        &#x2F;&#x2F; 此处可以写想要执行的代码，例如此处是每次执行到此处就加一，可以观察系统调用的频率\n        mov eax, ds:[0x8003f3f0]\n        inc eax\n        mov ds:[0x8003f3f0], eax\n        \n        popfd\n        popad\n        \n        \n        &#x2F;&#x2F; 将要跳转的地址写入寄存器就不需要每次计算偏移了\n        &#x2F;&#x2F; mov ecx, 0x8054252D\n        &#x2F;&#x2F; 我的KiFastCallEntry函数地址略有不同\n        mov ecx, 0x8053E54D\n        jmp ecx\n    &#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n\n<h2 id=\"修改跳转\"><a href=\"#修改跳转\" class=\"headerlink\" title=\"修改跳转\"></a>修改跳转</h2><p>至此，已经将想要执行的代码写入gdt里，接下来需要将_KiFastCallEntry的开头修改为jmp至目标地址</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        &#x2F;&#x2F; 关写保护\n        mov eax, cr0\n        and eax, not 10000h\n        mov cr0, eax\n        \n        &#x2F;&#x2F; mov al, 0xe9\n        &#x2F;&#x2F; mov ds:[0x80542520], al\n        &#x2F;&#x2F; mov eax, 0xFFAFCBFB       &#x2F;&#x2F; 8003f120-80542525\n        &#x2F;&#x2F; mov ds:[0x80542521], eax\n        &#x2F;&#x2F; 我的KiFastCallEntry函数地址略有不同\n        mov al, 0xe9\n        mov ds:[0x8053E540], al\n        mov eax, 0xFFB00BDB       &#x2F;&#x2F; 8003f120-8053e545\n        mov ds:[0x8053E541], eax\n        \n        &#x2F;&#x2F; 开写保护\n        mov eax, cr0\n        or eax, 10000h\n        mov cr0, eax\n        \n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n\n<h2 id=\"观察现象\"><a href=\"#观察现象\" class=\"headerlink\" title=\"观察现象\"></a>观察现象</h2><p>成功写入后接下来实现观察系统调用频率的代码</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nDWORD g_num;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        test eax, eax\n        jnz L\n        mov ds:[0x8003f3f0], eax\n        mov g_num, eax\n        iretd\nL:\n        mov eax, ds:[0x8003f3f0]\n        mov g_num, eax\n        \n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm&#123;\n        mov eax, 1\n        int 0x20\n    &#125;\n&#125;\n\nvoid reset() &#123;\n\t__asm&#123;\n        xor eax, eax\n        int 0x20\n    &#125;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n    reset();\n    printf(&quot;%d\\n&quot;, g_num);\n    while(1)&#123;\n        go();\n        Sleep(1000);\n        printf(&quot;%d\\n&quot;, g_num);\n    &#125;\n\t\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n\n<p>最终实验现象：</p>\n<p><img src=\"20230915-Windows-Kernel/image-20230920125519168.png\" alt=\"image-20230920125519168\"></p>\n<h1 id=\"12-InlineHook-3\"><a href=\"#12-InlineHook-3\" class=\"headerlink\" title=\"12_InlineHook(3)\"></a>12_InlineHook(3)</h1><h2 id=\"Hook-Debug-int-1\"><a href=\"#Hook-Debug-int-1\" class=\"headerlink\" title=\"Hook Debug(int 1)\"></a>Hook Debug(int 1)</h2><p>讲了一个利用push ret实现跳转从而hook idt里1号中断函数Debug的例子。原理基本一致</p>\n<h3 id=\"写GDT-1\"><a href=\"#写GDT-1\" class=\"headerlink\" title=\"写GDT\"></a>写GDT</h3><p>同样先将想要执行的代码写入gdt里：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nvoid JmpTarget();\n\nint i;\nchar *p;\nvoid __declspec(naked) IdtEntry() &#123;\n    p &#x3D; (char*)0x8003f120;\n    for(i &#x3D; 0; i &lt; 64; i++)&#123;\n        *p &#x3D; ((char*)JmpTarget)[i];\n        p++;\n    &#125;\n\t__asm &#123;\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid __declspec(naked) JmpTarget() &#123;\n    __asm&#123;\n        &#x2F;&#x2F; 被hook的函数(_KiTrap01)中被占用的指令\n        push 0\n        mov word ptr [esp+2], 0\n        \n        \n        push eax\n        \n        &#x2F;&#x2F; 将当前被调试的地址写入公共空间，此处实现了跨进程通信\n        mov eax, ss:[esp+4]\n        mov ds:[0x8003f3f0], eax\n        &#x2F;&#x2F; 标志已修改\n        mov eax, 1\n        mov ds:[0x8003f3f4], eax\n        \n        pop eax\n        \n        \n        push 0x80543325\n        ret\n    &#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n\n<h3 id=\"修改跳转-1\"><a href=\"#修改跳转-1\" class=\"headerlink\" title=\"修改跳转\"></a>修改跳转</h3><p>接下来将_KiTrap01的开头修改为push ret跳转至目标地址</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        &#x2F;&#x2F; 关写保护\n        mov eax, cr0\n        and eax, not 10000h\n        mov cr0, eax\n        \n        &#x2F;&#x2F; push 0x8003f120\n        &#x2F;&#x2F; 68 20 f1 03 80\n        &#x2F;&#x2F; ret\n        &#x2F;&#x2F; C3\n        mov eax, 0x03f12068\n        mov ds:[0x8054331C], eax\n        mov ax, 0xC380\n        mov ds:[0x80543320], ax\n        \n        &#x2F;&#x2F; 开写保护\n        mov eax, cr0\n        or eax, 10000h\n        mov cr0, eax\n        \n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n\n<h3 id=\"观察现象-1\"><a href=\"#观察现象-1\" class=\"headerlink\" title=\"观察现象\"></a>观察现象</h3><p>最后实现观察代码</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nDWORD g_num;\nDWORD g_enabled;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        mov eax, ds:[0x8003f3f0]\n        mov g_num, eax\n        mov eax, ds:[0x8003f3f4]\n        mov g_enabled, eax\n        xor eax, eax\n        mov ds:[0x8003f3f4], eax\n        \n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm&#123;\n        mov eax, 1\n        int 0x20\n    &#125;\n&#125;\n\nvoid reset() &#123;\n\t__asm&#123;\n        xor eax, eax\n        int 0x20\n    &#125;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n    reset();\n    printf(&quot;%d\\n&quot;, g_num);\n    while(1)&#123;\n        go();\n        Sleep(1000);\n        if (g_enabled)\n        \tprintf(&quot;%p\\n&quot;, g_num);\n    &#125;\n\t\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n\n\n\n<h2 id=\"Hook-Breakpoint-int-3\"><a href=\"#Hook-Breakpoint-int-3\" class=\"headerlink\" title=\"Hook Breakpoint(int 3)\"></a>Hook Breakpoint(int 3)</h2><p>自己尝试实现一个挂3号中断函数Breakpoint的hook</p>\n<h3 id=\"写GDT-2\"><a href=\"#写GDT-2\" class=\"headerlink\" title=\"写GDT\"></a>写GDT</h3><p>XueTr找函数地址</p>\n<p><img src=\"20230915-Windows-Kernel/image-20230920160252778.png\" alt=\"image-20230920160252778\"></p>\n<p>ida查看此处</p>\n<p><img src=\"20230915-Windows-Kernel/image-20230920160344382.png\" alt=\"image-20230920160344382\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nvoid JmpTarget();\n\nint i;\nchar *p;\nvoid __declspec(naked) IdtEntry() &#123;\n    p &#x3D; (char*)0x8003f120;\n    for(i &#x3D; 0; i &lt; 64; i++)&#123;\n        *p &#x3D; ((char*)JmpTarget)[i];\n        p++;\n    &#125;\n\t__asm &#123;\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid __declspec(naked) JmpTarget() &#123;\n    __asm&#123;\n        &#x2F;&#x2F; 被hook的函数(_KiTrap03)中被占用的指令6A0066C74424020000\n        __emit 0x6a\n        __emit 0x00\n        __emit 0x66\n        __emit 0xc7\n        __emit 0x44\n        __emit 0x24\n        __emit 0x02\n        __emit 0x00\n        __emit 0x00\n        \n        \n        push eax\n        \n        &#x2F;&#x2F; 将当前被调试的地址写入公共空间，此处实现了跨进程通信\n        mov eax, ss:[esp+4]\n        mov ds:[0x8003f3f0], eax\n        &#x2F;&#x2F; 标志已修改\n        mov eax, 1\n        mov ds:[0x8003f3f4], eax\n        \n        pop eax\n        \n        \n        push 0x8053F6ED\n        ret\n    &#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n\n<h3 id=\"修改跳转-2\"><a href=\"#修改跳转-2\" class=\"headerlink\" title=\"修改跳转\"></a>修改跳转</h3><p>接下来将_KiTrap01的开头修改为push ret跳转至目标地址</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        &#x2F;&#x2F; 关写保护\n        mov eax, cr0\n        and eax, not 10000h\n        mov cr0, eax\n        \n        mov eax, 0x03f12068\n        mov ds:[0x8053F6E4], eax\n        mov ax, 0xC380\n        mov ds:[0x8053F6E8], ax\n        \n        &#x2F;&#x2F; 开写保护\n        mov eax, cr0\n        or eax, 10000h\n        mov cr0, eax\n        \n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n\n<h3 id=\"观察现象-2\"><a href=\"#观察现象-2\" class=\"headerlink\" title=\"观察现象\"></a>观察现象</h3><p>最后实现观察代码</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nDWORD g_num;\nDWORD g_enabled;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        mov eax, ds:[0x8003f3f0]\n        mov g_num, eax\n        mov eax, ds:[0x8003f3f4]\n        mov g_enabled, eax\n        xor eax, eax\n        mov ds:[0x8003f3f4], eax\n        \n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm&#123;\n        mov eax, 1\n        int 0x20\n    &#125;\n&#125;\n\nvoid reset() &#123;\n\t__asm&#123;\n        xor eax, eax\n        int 0x20\n    &#125;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n    reset();\n    printf(&quot;%d\\n&quot;, g_num);\n    while(1)&#123;\n        go();\n        Sleep(100);\n        if (g_enabled)\n        \tprintf(&quot;%p\\n&quot;, g_num);\n    &#125;\n\t\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n<p>实验结果不算成功。读的全是0，麻了。</p>\n<p><img src=\"20230915-Windows-Kernel/image-20230920165451850.png\" alt=\"image-20230920165451850\"></p>\n<h1 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h1>","feature":false,"text":"周壑老师Windows内核学习笔记...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"Learn","slug":"Learn","count":3,"path":"api/categories/Learn.json"}],"tags":[{"name":"windows","slug":"windows","count":1,"path":"api/tags/windows.json"},{"name":"kernel","slug":"kernel","count":1,"path":"api/tags/kernel.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#01-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">01_环境搭建</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#02-%E4%B8%AD%E6%96%AD%E6%8F%90%E6%9D%83\"><span class=\"toc-text\">02_中断提权</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#03-%E5%A4%9A%E6%A0%B8%E5%A4%8D%E6%9D%82%E6%80%A7-1\"><span class=\"toc-text\">03_多核复杂性(1)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#04-%E5%A4%9A%E6%A0%B8%E5%A4%8D%E6%9D%82%E6%80%A7-2\"><span class=\"toc-text\">04_多核复杂性(2)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#05-%E4%B8%AD%E6%96%AD%E7%8E%B0%E5%9C%BA-1\"><span class=\"toc-text\">05_中断现场(1)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#06-%E4%B8%AD%E6%96%AD%E7%8E%B0%E5%9C%BA-2\"><span class=\"toc-text\">06_中断现场(2)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#07-%E4%B8%AD%E6%96%AD%E7%8E%B0%E5%9C%BA-3\"><span class=\"toc-text\">07_中断现场(3)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#08-%E5%86%8D%E6%AC%A1%E5%BC%80%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">08_再次开中断</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#09-API%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">09_API调用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#10-InlineHook-1\"><span class=\"toc-text\">10_InlineHook(1)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#11-InlineHook-2\"><span class=\"toc-text\">11_InlineHook(2)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%99GDT\"><span class=\"toc-text\">写GDT</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E8%B7%B3%E8%BD%AC\"><span class=\"toc-text\">修改跳转</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%82%E5%AF%9F%E7%8E%B0%E8%B1%A1\"><span class=\"toc-text\">观察现象</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#12-InlineHook-3\"><span class=\"toc-text\">12_InlineHook(3)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hook-Debug-int-1\"><span class=\"toc-text\">Hook Debug(int 1)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%99GDT-1\"><span class=\"toc-text\">写GDT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E8%B7%B3%E8%BD%AC-1\"><span class=\"toc-text\">修改跳转</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%82%E5%AF%9F%E7%8E%B0%E8%B1%A1-1\"><span class=\"toc-text\">观察现象</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Hook-Breakpoint-int-3\"><span class=\"toc-text\">Hook Breakpoint(int 3)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%99GDT-2\"><span class=\"toc-text\">写GDT</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E8%B7%B3%E8%BD%AC-2\"><span class=\"toc-text\">修改跳转</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%82%E5%AF%9F%E7%8E%B0%E8%B1%A1-2\"><span class=\"toc-text\">观察现象</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%AA%E5%AE%8C%E5%BE%85%E7%BB%AD\"><span class=\"toc-text\">未完待续</span></a></li></ol>","author":{"name":"y9nhjy","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/73747088?v=4","link":"https://y9nhjy.github.io","description":"手握日月摘星辰","socials":{"github":"https://github.com/y9nhjy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_51280668","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Proxifier注册机","uid":"f4299006905b671658e489a5612f0ab4","slug":"20230816-Proxifier-Keygen","date":"2023-08-16T03:00:00.000Z","updated":"2023-09-15T04:33:17.505Z","comments":true,"path":"api/articles/20230816-Proxifier-Keygen.json","keywords":null,"cover":[],"text":"Proxifier注册机编写过程...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"Keygen","slug":"Keygen","count":1,"path":"api/categories/Keygen.json"}],"tags":[{"name":"reverse","slug":"reverse","count":5,"path":"api/tags/reverse.json"},{"name":"keygen","slug":"keygen","count":1,"path":"api/tags/keygen.json"}],"author":{"name":"y9nhjy","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/73747088?v=4","link":"https://y9nhjy.github.io","description":"手握日月摘星辰","socials":{"github":"https://github.com/y9nhjy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_51280668","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"2022-HWS夏令营线下赛","uid":"63c1d1c611bd361be9cbbdc1ef690d2f","slug":"20220815-hws-live","date":"2022-08-15T03:00:00.000Z","updated":"2023-08-16T10:22:17.854Z","comments":true,"path":"api/articles/20220815-hws-live.json","keywords":null,"cover":[],"text":"2022-HWS夏令营线下赛 比赛：HWS计划第五期-2022硬件安全在线夏令营线下赛 时间：2022-08-15 17:00:00~2022-08-01 22...","link":"","photos":[],"count_time":{"symbolsCount":286,"symbolsTime":"1 mins."},"categories":[{"name":"Write Up","slug":"Write-Up","count":3,"path":"api/categories/Write-Up.json"}],"tags":[{"name":"ctf","slug":"ctf","count":3,"path":"api/tags/ctf.json"},{"name":"wp","slug":"wp","count":3,"path":"api/tags/wp.json"},{"name":"reverse","slug":"reverse","count":5,"path":"api/tags/reverse.json"}],"author":{"name":"y9nhjy","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/73747088?v=4","link":"https://y9nhjy.github.io","description":"手握日月摘星辰","socials":{"github":"https://github.com/y9nhjy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_51280668","juejin":"","customs":{}}},"feature":false}}