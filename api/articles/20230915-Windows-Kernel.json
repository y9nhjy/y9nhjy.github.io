{"title":"Windows内核","uid":"d3e49ebf88f6993b40db7660670c9af3","slug":"20230915-Windows-Kernel","date":"2023-09-15T02:00:00.000Z","updated":"2023-09-18T02:57:04.474Z","comments":true,"path":"api/articles/20230915-Windows-Kernel.json","keywords":null,"cover":null,"content":"<h1 id=\"01-环境搭建\"><a href=\"#01-环境搭建\" class=\"headerlink\" title=\"01_环境搭建\"></a>01_环境搭建</h1><ul>\n<li>Windows XP Professional 虚拟机<ul>\n<li>内存256MB，小一点方便快照</li>\n<li>处理器单核单线程，方便实验，多核具有复杂性</li>\n<li>串口 \\\\.\\pipe\\com_1</li>\n<li>C:\\\\boot.ini 设置调试模式：multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS&#x3D;”Microsoft Windows XP Professional” &#x2F;noexecute&#x3D;optin &#x2F;fastdetect &#x2F;debug &#x2F;debugport&#x3D;com_1 &#x2F;baudrate&#x3D;115200</li>\n</ul>\n</li>\n<li>windbg 启动参数：<code>&quot;C:\\Program Files\\Windows Kits\\10\\Debuggers\\x64\\windbg.exe&quot; -b -k com:pipe,port=\\\\.\\pipe\\com_1,baud=115200,reconnect,resets=0 -y SRV\\*D:\\symbol\\*http://msdl.microsoft.com/download/symbols</code></li>\n<li>Visual Studio2010 (高版本VS生成的exe文件无法在XP上运行)<ul>\n<li>Release，Win32</li>\n<li>项目属性–配置属性–链接器–随机基址-&gt;否</li>\n<li>项目属性–配置属性–链接器–固定基址-&gt;是</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"02-中断提权\"><a href=\"#02-中断提权\" class=\"headerlink\" title=\"02_中断提权\"></a>02_中断提权</h1><p>本节虚拟机内需要安装的工具：</p>\n<ul>\n<li>XueTr：查看内核状态</li>\n</ul>\n<p>系统中高于0x80000000的地址是内核地址，低于0x80000000的地址是用户地址</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nDWORD g_tmp &#x3D; 0;\n\n&#x2F;&#x2F; r idtr                           读中断描述符表寄存器\n&#x2F;&#x2F; dq 8003f400 l40                  读中断描述符表\n&#x2F;&#x2F; eq 8003f500  0040ee00&#96;00081000   写中断描述符表，两边即目标函数0x00401000，中间八位是权限描述等\n&#x2F;&#x2F; 写完之后 XueTr 上还是看不到，但是 windbg 能看到，原因是 XueTr 的智能识别识别不了0x00401000函数\n\n&#x2F;&#x2F; 裸函数，没有 push ebp 之类的函数头，方便写汇编\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n\t\tmov eax, dword ptr ds:[0x8003f014]\n\t\tmov g_tmp, eax  &#x2F;&#x2F; 这里不要用printf，尽量少写代码，printf经过层层调用干了很多事，在0环中是非常危险的\n\t\tiretd           &#x2F;&#x2F; 32位不是iret，是iretd\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; 产生偏移为0x20的中断\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n&#x2F;&#x2F; 3环中 int 0 和直接除零异常不同，根据中断描述符表对应的dpl进行不同的处理\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tprintf(&quot;%p\\n&quot;, g_tmp);\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n<p>注意：能调试内核的原因是启动了debug模式，调试器接管了系统，否则是无法调试内核的</p>\n<h1 id=\"03-多核复杂性-1\"><a href=\"#03-多核复杂性-1\" class=\"headerlink\" title=\"03_多核复杂性(1)\"></a>03_多核复杂性(1)</h1><p>本节虚拟机内需要安装的工具：</p>\n<ul>\n<li>Cheat Engine 6.x：拥有驱动模块dbk32.sys，可以更改内核地址。第一次启动需要在 设置–其他 全部勾上</li>\n</ul>\n<p>注意：乱改内核地址会蓝屏</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nDWORD g_tmp;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123; &#x2F;&#x2F; 中断处理进程进来后中断是关闭状态，防止中断嵌套\n        pushfd\n\t\tpop eax\n\t\tmov g_tmp, eax\n        &#x2F;&#x2F; 第九位eflag是中断位\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tprintf(&quot;%p\\n&quot;, g_tmp);\n    &#x2F;&#x2F; 显示46，正常3环会是246\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n<p>多核时windbg切换核：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0: kd&gt; ~1\n1: kd&gt;</code></pre>\n\n\n\n<h1 id=\"04-多核复杂性-2\"><a href=\"#04-多核复杂性-2\" class=\"headerlink\" title=\"04_多核复杂性(2)\"></a>04_多核复杂性(2)</h1><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        &#x2F;&#x2F; 多核复杂性：想稳定挂钩，涉及到lock页，此处是简单绕过\n        mov eax, cr0         &#x2F;&#x2F; 修改cr0绕过写保护，cr0不能直接与\n        and eax, not 10000h  &#x2F;&#x2F; 取反，同时适用于不同位数的寄存器\n        mov cr0, eax\n        \n        mov eax, 0xffffffff\n        &#x2F;&#x2F; 0x80542520来源于主要系统模块ntkrpamp(ntkrnlpa.exe?)的_KiFastCallEntry(3环进0环的入口)\n        &#x2F;&#x2F; 用ida分析ntkrpamp(ntkrnlpa.exe?)时需要基址重定位\n        mov ds:[0x80542520], eax\n        &#x2F;&#x2F; 这里有个有意思的点：可以修改idt表项，将之前的入口函数地址痕迹清除\n        \n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n\n\n<h1 id=\"05-中断现场-1\"><a href=\"#05-中断现场-1\" class=\"headerlink\" title=\"05_中断现场(1)\"></a>05_中断现场(1)</h1><p>观察中断前和中断后寄存器的变化</p>\n<p>注意：不要用printf来观察，而是如同下面使用全局变量和mov指令进行观察，printf会破坏寄存器现场</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nDWORD g_esp[2];\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        mov [g_esp+4], esp\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n    __asm&#123;\n        mov [g_esp], esp\n    &#125;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n    printf(&quot;%p\\n&quot;, g_esp[0]);\n    printf(&quot;%p\\n&quot;, g_esp[1]);\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n<p>eax,ebx,ecx,edx,esp,ebp,esi,edi,cs,ds,ss,es,fs,gs</p>\n<p>有改变的寄存器：cs(根据门描述符变化)，ss，esp，eflags，eip</p>\n<p>描述符(用途：①内存区域；②门) gdt idt 保护模式 选择子</p>\n<h1 id=\"06-中断现场-2\"><a href=\"#06-中断现场-2\" class=\"headerlink\" title=\"06_中断现场(2)\"></a>06_中断现场(2)</h1><p>进入0环中断函数后用windbg断下来在windbg寄存器窗口查看fs的值为30，而根据上节的情况观察到fs的值是3B(此值是正确的)，因为断点将信息传输给调试器时进行了大量不可控的操作。“对微观世界的观测会对微观物质产生影响”，调试器侵入内核会对其产生影响。所以不要太依赖调试器</p>\n<p>一个基本观点：调试器的核心代码是不能被进行调试的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;Windows.h&gt;\n\nDWORD g_8003f038;   &#x2F;&#x2F; 此gdt表项在windbg和XueTr中查看到的值不同(XueTr是正确的)\n\nvoid __declspec(naked) IdtEntry() &#123;\n\t__asm &#123;\n        push eax\n        mov eax, ds:[0x8003f038]\n        mov g_8003f038, eax\n        pop eax\n\t\tiretd\n\t&#125;\n&#125;\n\nvoid go() &#123;\n\t__asm int 0x20;\n&#125;\n\nint main() &#123;\n\tif ((DWORD)IdtEntry !&#x3D; 0x401000) &#123;\n\t\tprintf(&quot;wrong addr: %p&quot;, IdtEntry);\n\t\texit(-1);\n\t&#125;\n\tgo();\n    printf(&quot;%p\\n&quot;, g_8003f038);\n\tsystem(&quot;pause&quot;);\n&#125;</code></pre>\n\n<p>ss是esp使用的段，当权限切换的时候伴随着堆栈的切换</p>\n<h1 id=\"07-中断现场-3\"><a href=\"#07-中断现场-3\" class=\"headerlink\" title=\"07_中断现场(3)\"></a>07_中断现场(3)</h1><p>cpu进行线程调度的时候，就把esp内核栈地址和ss地址写入tss</p>\n<p>从0环回3环时栈里依次存储了eip，ring3 cs，ring3 eflags，ring3 esp，ring3 ss的值</p>\n<h1 id=\"08-再次开中断\"><a href=\"#08-再次开中断\" class=\"headerlink\" title=\"08_再次开中断\"></a>08_再次开中断</h1>","feature":true,"text":"学习周壑老师的Windows内核过程中记录的笔记...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"Learn","slug":"Learn","count":1,"path":"api/categories/Learn.json"}],"tags":[{"name":"windows","slug":"windows","count":1,"path":"api/tags/windows.json"},{"name":"kernel","slug":"kernel","count":1,"path":"api/tags/kernel.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#01-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">01_环境搭建</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#02-%E4%B8%AD%E6%96%AD%E6%8F%90%E6%9D%83\"><span class=\"toc-text\">02_中断提权</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#03-%E5%A4%9A%E6%A0%B8%E5%A4%8D%E6%9D%82%E6%80%A7-1\"><span class=\"toc-text\">03_多核复杂性(1)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#04-%E5%A4%9A%E6%A0%B8%E5%A4%8D%E6%9D%82%E6%80%A7-2\"><span class=\"toc-text\">04_多核复杂性(2)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#05-%E4%B8%AD%E6%96%AD%E7%8E%B0%E5%9C%BA-1\"><span class=\"toc-text\">05_中断现场(1)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#06-%E4%B8%AD%E6%96%AD%E7%8E%B0%E5%9C%BA-2\"><span class=\"toc-text\">06_中断现场(2)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#07-%E4%B8%AD%E6%96%AD%E7%8E%B0%E5%9C%BA-3\"><span class=\"toc-text\">07_中断现场(3)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#08-%E5%86%8D%E6%AC%A1%E5%BC%80%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">08_再次开中断</span></a></li></ol>","author":{"name":"y9nhjy","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/73747088?v=4","link":"https://y9nhjy.github.io","description":"手握日月摘星辰","socials":{"github":"https://github.com/y9nhjy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_51280668","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Proxifier注册机","uid":"f4299006905b671658e489a5612f0ab4","slug":"20230816-Proxifier-Keygen","date":"2023-08-16T03:00:00.000Z","updated":"2023-09-15T04:33:17.505Z","comments":true,"path":"api/articles/20230816-Proxifier-Keygen.json","keywords":null,"cover":[],"text":"Proxifier注册机编写过程...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"Keygen","slug":"Keygen","count":1,"path":"api/categories/Keygen.json"}],"tags":[{"name":"reverse","slug":"reverse","count":4,"path":"api/tags/reverse.json"},{"name":"keygen","slug":"keygen","count":1,"path":"api/tags/keygen.json"}],"author":{"name":"y9nhjy","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/73747088?v=4","link":"https://y9nhjy.github.io","description":"手握日月摘星辰","socials":{"github":"https://github.com/y9nhjy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_51280668","juejin":"","customs":{}}},"feature":true}}